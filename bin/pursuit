#!/usr/bin/env node

'use strict';

const fs = require('fs');
const pkg = require('../package.json');

/**
 * 解析命令
 */
const program = require('commander');
program
    .usage('[options] <task>')
    .version(pkg.version)
    .command('init [options] <repo>', 'init a PURSUIT repo')
    .option('-w, --watch', 'watch')
    .option('-O, --online-mode', 'online mode')
    .option('-v, --verbose', 'verbose')
    .option('-f, --fix', 'fix when lint')
    .parse(process.argv);
program.online = program.onlineMode;

const command = program.args[0];
if (!command)
    return program.help();
if (command === 'init')
    return;

// if(!fs.existsSync(process.cwd() + '/package.json')) {
//     console.error('error: Not a npm package');
//     console.error('Please `cd` into a npm package directory.');
//     return;
// }

/**
 * 处理配置
 */
// config太多人用了，容易冲突
global.settings = {
    command,
    watch: false,
    online: false,
    verbose: false,
    fix: false,
    src: '.',
    dest: '.',
};

// 合并cwd路径下的配置
const cwdConfigPath = process.cwd() + '/pursuit.config.js';
if (fs.existsSync(cwdConfigPath)) {
    const cwdConfig = require(cwdConfigPath);
    Object.assign(settings, cwdConfig);
}

// 合并program的配置
for(let key in settings) {
    if(settings.hasOwnProperty(key) && program[key] !== undefined)
        settings[key] = program[key];
}

if(command === 'dev') {
    settings.watch = true;
    settings.fix = true;
} else if(command === 'online') {
    settings.watch = false;
    settings.online = true;
}

/**
 * 引入gulp
 */
// 给gulp配置log染色
const gulp = require('../lib/logEventsGulp.js');

// 分开引用，加快gulp启动速度
if (command.startsWith('build'))
    require('../gulp/build/index.js');
else if (command.startsWith('lint'))
    require('../gulp/lint/index.js');
else if (command.startsWith('test'))
    require('../gulp/test/index.js');
else
    require('../gulpfile.js');

// 引入cwd路径下的task
const cwdGulpfilePath = process.cwd() + '/gulpfile.js';
if (fs.existsSync(cwdGulpfilePath))
    require(cwdGulpfilePath);

gulp.start(command);
